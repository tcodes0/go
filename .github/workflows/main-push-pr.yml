name: Main push or PR

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  changed-files:
    name: Analyze changed files
    runs-on: ubuntu-latest
    outputs:
      goModChanged: ${{ steps.output-changed-files.outputs.goModChanged }}
      configChanged: ${{ steps.output-changed-files.outputs.configChanged }}
      docChanged: ${{ steps.output-changed-files.outputs.docChanged }}
      anyPkgGoChanged: ${{ steps.output-changed-files.outputs.anyPkgGoChanged }}
      pkgHttpflushGoChanged: ${{ steps.output-changed-files.outputs.pkgHttpflushGoChanged }}
    steps:
      - uses: actions/checkout@v4

      - name: List changed files
        id: list-changed-files
        uses: tj-actions/changed-files@v44
        with:
          # since_last_remote_commit: true # use only for testing, it's easy to produce no changed files
          files_yaml: |
            go_mod:
              - '**/go.mod'
              - '**/go.sum'
            config:
              - '**/*.yaml'
              - '**/*.yml'
              - '**/*.json'
            doc:
              - '**/*.md'
            pkg_httpflush_go:
              - src/httpflush/**.go

      - name: Output Changed files
        id: output-changed-files
        env:
          GO_MOD: ${{ steps.list-changed-files.outputs.go_mod_all_changed_files }}
          CONFIG: ${{ steps.list-changed-files.outputs.config_all_changed_files }}
          DOC: ${{ steps.list-changed-files.outputs.doc_all_changed_files }}
          PKG_HTTPFLUSH_GO: ${{ steps.list-changed-files.outputs.pkg_httpflush_go_all_changed_files }}
        run: |
          # analyze changed files and produce outputs
          set -e

          goModChanged="true"
          if [ -n "$GO_MOD" ]; then goModChanged=""; fi

          configChanged="true"
          if [ -n "$CONFIG" ]; then configChanged=""; fi

          docChanged="true"
          if [ -n "$DOC" ]; then docChanged=""; fi

          pkgHttpflushGoChanged="true"
          if [ -n "$PKG_HTTPFLUSH_GO" ]; then pkgHttpflushGoChanged=""; fi

          anyPkgGoChanged=(\
          $pkgHttpflushGoChanged\
          )

          echo "goModChanged=$goModChanged"                   >> $GITHUB_OUTPUT
          echo "configChanged=$configChanged"                 >> $GITHUB_OUTPUT
          echo "docChanged=$docChanged"                       >> $GITHUB_OUTPUT
          echo "pkgHttpflushGoChanged=$pkgHttpflushGoChanged" >> $GITHUB_OUTPUT
          echo "anyPkgGoChanged=${anyPkgGoChanged[*]}"        >> $GITHUB_OUTPUT

  debug:
    name: Debug
    needs: changed-files
    runs-on: ubuntu-latest
    if: false # change to debug
    env:
      REF: ${{ github.head_ref }}
    steps:
      - name: Debug step
        run: true

  go-mod:
    name: go.mod up to date
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.anyPkgGoChanged || needs.changed-files.outputs.goModChanged
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - name: Go mod check
        uses: j0hnsmith/go-mod-check@v1
        with:
          working-directory: .

  mocks:
    name: Go mocks up to date
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.anyPkgGoChanged
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - uses: brokeyourbike/go-mockery-action@v0
        with:
          mockery-version: "2.42.3"
      - run: true

      - name: Check mocks are up to date
        working-directory: .
        run: |
          # diff mockery changes
          set -e
          mockery

          DIFF=$(git diff .)
          if [ -n "$DIFF" ]; then
            echo "$DIFF"
            echo "run 'mockery' and commit the changes"
            exit 1
          fi

  httpflush_pr:
    name: httpflush PR
    needs: changed-files
    if: needs.changed-files.outputs.pkgHttpflushGoChanged
    uses: ./.github/workflows/package_pr.yml
    with:
      goVersion: 1.22
      packagePath: src/httpflush
      branch: ${{ github.head_ref }}

name: Main push or PR

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  changed-files:
    name: Analyze changed files
    runs-on: ubuntu-latest
    outputs:
      goModChanged: ${{ steps.output-changed-files.outputs.goModChanged }}
      configChanged: ${{ steps.output-changed-files.outputs.configChanged }}
      docChanged: ${{ steps.output-changed-files.outputs.docChanged }}
      anyGoPkgChanged: ${{ steps.output-changed-files.outputs.anyGoPkgChanged }}
      goPkgHttpflushChanged: ${{ steps.output-changed-files.outputs.goPkgHttpflushChanged }}
    steps:
      - uses: actions/checkout@v4

      - name: List changed files
        id: list-changed-files
        uses: tj-actions/changed-files@v44
        with:
          # since_last_remote_commit: true # use only for testing, it's easy to produce no changed files
          files_yaml: |
            go_mod:
              - '**/go.mod'
              - '**/go.sum'
            config:
              - '**/*.yaml'
              - '**/*.yml'
              - '**/*.json'
            doc:
              - '**/*.md'
            go_pkg_httpflush:
              - src/httpflush/**.go

      - name: Output Changed files
        id: output-changed-files
        env:
          GO_MOD: ${{ steps.list-changed-files.outputs.go_mod_all_changed_files }}
          CONFIG: ${{ steps.list-changed-files.outputs.config_all_changed_files }}
          DOC: ${{ steps.list-changed-files.outputs.doc_all_changed_files }}
          GO_PKG_HTTPFLUSH: ${{ steps.list-changed-files.outputs.go_pkg_httpflush_all_changed_files }}
        run: |
          # analyze changed files and produce outputs
          set -e

          echo "GO_MOD=${GO_MOD}"
          goModChanged="true"
          if [ -z "$GO_MOD" ]; then goModChanged=""; fi

          echo "CONFIG=${CONFIG}"
          configChanged="true"
          if [ -z "$CONFIG" ]; then configChanged=""; fi

          echo "DOC=${DOC}"
          docChanged="true"
          if [ -z "$DOC" ]; then docChanged=""; fi

          echo "GO_PKG_HTTPFLUSH=${GO_PKG_HTTPFLUSH}"
          goPkgHttpflushChanged="true"
          if [ -z "$GO_PKG_HTTPFLUSH" ]; then goPkgHttpflushChanged=""; fi

          anyGoPkgChanged=(${goPkgHttpflushChanged})

          echo "goModChanged=$goModChanged"                   >> $GITHUB_OUTPUT
          echo "goModChanged=$goModChanged"
          echo "configChanged=$configChanged"                 >> $GITHUB_OUTPUT
          echo "configChanged=$configChanged"
          echo "docChanged=$docChanged"                       >> $GITHUB_OUTPUT
          echo "docChanged=$docChanged"
          echo "goPkgHttpflushChanged=$goPkgHttpflushChanged" >> $GITHUB_OUTPUT
          echo "goPkgHttpflushChanged=$goPkgHttpflushChanged"
          echo "anyGoPkgChanged=${anyGoPkgChanged[*]}"        >> $GITHUB_OUTPUT
          echo "anyGoPkgChanged=${anyGoPkgChanged[*]}"

  debug:
    name: Debug
    needs: changed-files
    runs-on: ubuntu-latest
    if: false # change to debug
    env:
      TEST: ${{ needs.changed-files.outputs.goPkgHttpflushChanged }}
    steps:
      - name: Debug step
        run: true

  go-mod:
    name: Go.mod up to date
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.anyGoPkgChanged || needs.changed-files.outputs.goModChanged
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - name: Go mod check
        uses: j0hnsmith/go-mod-check@v1
        with:
          working-directory: .

  mocks:
    name: Go mocks up to date
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.anyGoPkgChanged
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - uses: brokeyourbike/go-mockery-action@v0
        with:
          mockery-version: "2.42.3"
      - run: true

      - name: Check mocks are up to date
        working-directory: .
        run: |
          # diff mockery changes
          set -e
          mockery

          DIFF=$(git diff .)
          if [ -n "$DIFF" ]; then
            echo "$DIFF"
            echo "run 'mockery' and commit the changes"
            exit 1
          fi

  httpflush_pr:
    name: httpflush PR
    needs: changed-files
    if: needs.changed-files.outputs.goPkgHttpflushChanged
    uses: ./.github/workflows/package-pr.yml
    with:
      goVersion: 1.22
      packagePath: src/httpflush
      branch: ${{ github.head_ref }}

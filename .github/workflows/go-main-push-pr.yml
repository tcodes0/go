name: Go main push or PR

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  changed-files:
    name: Analyze changed files
    runs-on: ubuntu-latest
    outputs:
      hasChanges: ${{ steps.changed-files-logic.outputs.hasChanges }}
    steps:
      - uses: actions/checkout@v4

      - name: List changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          # since_last_remote_commit: true # use only for testing, it's easy to produce no changed files
          files: |
            **.go

      - name: Debug changed files
        if: false # change to debug
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          # print changed files to stdout
          changedArray=($ALL_CHANGED_FILES)
          echo "${#changedArray[*]} files changed"
          for file in ${changedArray[@]}; do
            echo "$file"
          done

      - name: Changed files logic
        id: changed-files-logic
        env:
          ADDED: ${{ steps.changed-files.outputs.added_files_count }}
          MODIFIED: ${{ steps.changed-files.outputs.modified_files_count }}
          DELETED: ${{ steps.changed-files.outputs.deleted_files_count }}
          ANY: ${{ steps.changed-files.outputs.any_changed }}
        run: |
          # logic script
          addModifyDeleteCount=$(($ADDED+$MODIFIED+$DELETED))
          hasChanges="true"
          if [ $addModifyDeleteCount == 0 ]; then
            hasChanges="" # empty means false, avoids typing '== "false"'
          fi
          echo "hasChanges=$hasChanges" >> $GITHUB_OUTPUT

  debug:
    name: Debug
    needs: changed-files
    runs-on: ubuntu-latest
    if: false # change to debug
    env:
      HAS_CHANGES: ${{ needs.changed-files.outputs.hasChanges }}
    steps:
      - name: Debug step
        run: |
          true

  go-mod:
    name: go.mod up to date
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.hasChanges
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - name: Go mod check
        uses: j0hnsmith/go-mod-check@v1
        with:
          working-directory: .

  mocks:
    name: Go mocks up to date
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.hasChanges
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - uses: brokeyourbike/go-mockery-action@v0
        with:
          mockery-version: "2.42.3"
      - run: true

      - name: Check mocks are up to date
        working-directory: .
        run: |
          # diff mockery changes
          mockery
          DIFF=$(git diff .)
          if [ -n "$DIFF" ]; then
            echo "$DIFF"
            echo "run 'mockery' and commit the changes"
            exit 1
          fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.hasChanges
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - name: Build
        run: go build -mod=readonly -v ./...

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.hasChanges
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        id: setup-up-go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - name: Test
        run: go test -mod=readonly -json -race  ./... > test.json

      - name: Annotate tests
        uses: guyarb/golang-test-annotations@v0.5.1
        with:
          test-results: test.json
          package-name: github.com/tcodes0/go

// Code generated by mockery v2.42.1. DO NOT EDIT.

package reflectutil

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"
)

// MockFieldResolver is an autogenerated mock type for the FieldResolver type
type MockFieldResolver struct {
	mock.Mock
}

type MockFieldResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFieldResolver) EXPECT() *MockFieldResolver_Expecter {
	return &MockFieldResolver_Expecter{mock: &_m.Mock}
}

// Resolve provides a mock function with given fields: field, base
func (_m *MockFieldResolver) Resolve(field *reflect.StructField, base reflect.Value) error {
	ret := _m.Called(field, base)

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*reflect.StructField, reflect.Value) error); ok {
		r0 = rf(field, base)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFieldResolver_Resolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolve'
type MockFieldResolver_Resolve_Call struct {
	*mock.Call
}

// Resolve is a helper method to define mock.On call
//   - field *reflect.StructField
//   - base reflect.Value
func (_e *MockFieldResolver_Expecter) Resolve(field interface{}, base interface{}) *MockFieldResolver_Resolve_Call {
	return &MockFieldResolver_Resolve_Call{Call: _e.mock.On("Resolve", field, base)}
}

func (_c *MockFieldResolver_Resolve_Call) Run(run func(field *reflect.StructField, base reflect.Value)) *MockFieldResolver_Resolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*reflect.StructField), args[1].(reflect.Value))
	})
	return _c
}

func (_c *MockFieldResolver_Resolve_Call) Return(_a0 error) *MockFieldResolver_Resolve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFieldResolver_Resolve_Call) RunAndReturn(run func(*reflect.StructField, reflect.Value) error) *MockFieldResolver_Resolve_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFieldResolver creates a new instance of MockFieldResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFieldResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFieldResolver {
	mock := &MockFieldResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery. DO NOT EDIT.

package identifier

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockGenerator is an autogenerated mock type for the Generator type
type MockGenerator struct {
	mock.Mock
}

type MockGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGenerator) EXPECT() *MockGenerator_Expecter {
	return &MockGenerator_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function with given fields:
func (_m *MockGenerator) Generate() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockGenerator_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockGenerator_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
func (_e *MockGenerator_Expecter) Generate() *MockGenerator_Generate_Call {
	return &MockGenerator_Generate_Call{Call: _e.mock.On("Generate")}
}

func (_c *MockGenerator_Generate_Call) Run(run func()) *MockGenerator_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGenerator_Generate_Call) Return(_a0 string) *MockGenerator_Generate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGenerator_Generate_Call) RunAndReturn(run func() string) *MockGenerator_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// WithContext provides a mock function with given fields: ctx
func (_m *MockGenerator) WithContext(ctx context.Context) context.Context {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WithContext")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockGenerator_WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithContext'
type MockGenerator_WithContext_Call struct {
	*mock.Call
}

// WithContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGenerator_Expecter) WithContext(ctx interface{}) *MockGenerator_WithContext_Call {
	return &MockGenerator_WithContext_Call{Call: _e.mock.On("WithContext", ctx)}
}

func (_c *MockGenerator_WithContext_Call) Run(run func(ctx context.Context)) *MockGenerator_WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGenerator_WithContext_Call) Return(_a0 context.Context) *MockGenerator_WithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGenerator_WithContext_Call) RunAndReturn(run func(context.Context) context.Context) *MockGenerator_WithContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGenerator creates a new instance of MockGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGenerator {
	mock := &MockGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery. DO NOT EDIT.

package main

import mock "github.com/stretchr/testify/mock"

// MockFile is an autogenerated mock type for the File type
type MockFile struct {
	mock.Mock
}

type MockFile_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFile) Expect() *MockFile_Expecter {
	return &MockFile_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockFile) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFile_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockFile_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockFile_Expecter) Close() *MockFile_Close_Call {
	return &MockFile_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockFile_Close_Call) Run(run func()) *MockFile_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFile_Close_Call) Return(_a0 error) *MockFile_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFile_Close_Call) RunAndReturn(run func() error) *MockFile_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: p
func (_m *MockFile) Read(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFile_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockFile_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - p []byte
func (_e *MockFile_Expecter) Read(p interface{}) *MockFile_Read_Call {
	return &MockFile_Read_Call{Call: _e.mock.On("Read", p)}
}

func (_c *MockFile_Read_Call) Run(run func(p []byte)) *MockFile_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockFile_Read_Call) Return(n int, err error) *MockFile_Read_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockFile_Read_Call) RunAndReturn(run func([]byte) (int, error)) *MockFile_Read_Call {
	_c.Call.Return(run)
	return _c
}

// WriteString provides a mock function with given fields: s
func (_m *MockFile) WriteString(s string) (int, error) {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for WriteString")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(s)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFile_WriteString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteString'
type MockFile_WriteString_Call struct {
	*mock.Call
}

// WriteString is a helper method to define mock.On call
//   - s string
func (_e *MockFile_Expecter) WriteString(s interface{}) *MockFile_WriteString_Call {
	return &MockFile_WriteString_Call{Call: _e.mock.On("WriteString", s)}
}

func (_c *MockFile_WriteString_Call) Run(run func(s string)) *MockFile_WriteString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFile_WriteString_Call) Return(n int, err error) *MockFile_WriteString_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockFile_WriteString_Call) RunAndReturn(run func(string) (int, error)) *MockFile_WriteString_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFile creates a new instance of MockFile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFile(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFile {
	mock := &MockFile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

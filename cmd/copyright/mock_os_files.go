// Code generated by mockery v2.43.0. DO NOT EDIT.

package main

import (
	io "io"
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// MockOSFiles is an autogenerated mock type for the OSFiles type
type MockOSFiles struct {
	mock.Mock
}

type MockOSFiles_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOSFiles) Expect() *MockOSFiles_Expecter {
	return &MockOSFiles_Expecter{mock: &_m.Mock}
}

// Glob provides a mock function with given fields: pattern
func (_m *MockOSFiles) Glob(pattern string) ([]string, error) {
	ret := _m.Called(pattern)

	if len(ret) == 0 {
		panic("no return value specified for Glob")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(pattern)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(pattern)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pattern)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOSFiles_Glob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Glob'
type MockOSFiles_Glob_Call struct {
	*mock.Call
}

// Glob is a helper method to define mock.On call
//   - pattern string
func (_e *MockOSFiles_Expecter) Glob(pattern interface{}) *MockOSFiles_Glob_Call {
	return &MockOSFiles_Glob_Call{Call: _e.mock.On("Glob", pattern)}
}

func (_c *MockOSFiles_Glob_Call) Run(run func(pattern string)) *MockOSFiles_Glob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockOSFiles_Glob_Call) Return(matches []string, err error) *MockOSFiles_Glob_Call {
	_c.Call.Return(matches, err)
	return _c
}

func (_c *MockOSFiles_Glob_Call) RunAndReturn(run func(string) ([]string, error)) *MockOSFiles_Glob_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields: name
func (_m *MockOSFiles) Open(name string) (File, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (File, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) File); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(File)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOSFiles_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MockOSFiles_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - name string
func (_e *MockOSFiles_Expecter) Open(name interface{}) *MockOSFiles_Open_Call {
	return &MockOSFiles_Open_Call{Call: _e.mock.On("Open", name)}
}

func (_c *MockOSFiles_Open_Call) Run(run func(name string)) *MockOSFiles_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockOSFiles_Open_Call) Return(file File, err error) *MockOSFiles_Open_Call {
	_c.Call.Return(file, err)
	return _c
}

func (_c *MockOSFiles_Open_Call) RunAndReturn(run func(string) (File, error)) *MockOSFiles_Open_Call {
	_c.Call.Return(run)
	return _c
}

// OpenFile provides a mock function with given fields: name, flag, perm
func (_m *MockOSFiles) OpenFile(name string, flag int, perm fs.FileMode) (File, error) {
	ret := _m.Called(name, flag, perm)

	if len(ret) == 0 {
		panic("no return value specified for OpenFile")
	}

	var r0 File
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, fs.FileMode) (File, error)); ok {
		return rf(name, flag, perm)
	}
	if rf, ok := ret.Get(0).(func(string, int, fs.FileMode) File); ok {
		r0 = rf(name, flag, perm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(File)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, fs.FileMode) error); ok {
		r1 = rf(name, flag, perm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOSFiles_OpenFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenFile'
type MockOSFiles_OpenFile_Call struct {
	*mock.Call
}

// OpenFile is a helper method to define mock.On call
//   - name string
//   - flag int
//   - perm fs.FileMode
func (_e *MockOSFiles_Expecter) OpenFile(name interface{}, flag interface{}, perm interface{}) *MockOSFiles_OpenFile_Call {
	return &MockOSFiles_OpenFile_Call{Call: _e.mock.On("OpenFile", name, flag, perm)}
}

func (_c *MockOSFiles_OpenFile_Call) Run(run func(name string, flag int, perm fs.FileMode)) *MockOSFiles_OpenFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(fs.FileMode))
	})
	return _c
}

func (_c *MockOSFiles_OpenFile_Call) Return(file File, err error) *MockOSFiles_OpenFile_Call {
	_c.Call.Return(file, err)
	return _c
}

func (_c *MockOSFiles_OpenFile_Call) RunAndReturn(run func(string, int, fs.FileMode) (File, error)) *MockOSFiles_OpenFile_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAll provides a mock function with given fields: r
func (_m *MockOSFiles) ReadAll(r io.Reader) ([]byte, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ReadAll")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader) ([]byte, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(io.Reader) []byte); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOSFiles_ReadAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAll'
type MockOSFiles_ReadAll_Call struct {
	*mock.Call
}

// ReadAll is a helper method to define mock.On call
//   - r io.Reader
func (_e *MockOSFiles_Expecter) ReadAll(r interface{}) *MockOSFiles_ReadAll_Call {
	return &MockOSFiles_ReadAll_Call{Call: _e.mock.On("ReadAll", r)}
}

func (_c *MockOSFiles_ReadAll_Call) Run(run func(r io.Reader)) *MockOSFiles_ReadAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader))
	})
	return _c
}

func (_c *MockOSFiles_ReadAll_Call) Return(b []byte, err error) *MockOSFiles_ReadAll_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockOSFiles_ReadAll_Call) RunAndReturn(run func(io.Reader) ([]byte, error)) *MockOSFiles_ReadAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOSFiles creates a new instance of MockOSFiles. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOSFiles(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOSFiles {
	mock := &MockOSFiles{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
